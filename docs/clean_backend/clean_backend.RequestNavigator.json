{"name":"RequestNavigator","qualifiedName":"clean_backend/clean_backend.RequestNavigator","comment":"<p><a>clean_backend/clean_backend.RequestNavigator</a> wires together <a>clean_backend/clean_router-common.Route</a> matching, Filtering of <a>clean_backend/dart:io.HttpRequest</a>s\nand Handler calling. It manages url addresses and bind them handlers.</p>","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":["clean_backend/clean_backend.ZonedRequestNavigator"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"clean_backend/clean_backend.RequestNavigator.RequestNavigator-","comment":"<p>Creates new RequestNavigator listening on <a>clean_backend/clean_backend.RequestNavigator.RequestNavigator-._incoming</a> and routing via <a>clean_backend/clean_backend.RequestNavigator.RequestNavigator-._router</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_incoming":{"name":"_incoming","optional":false,"named":false,"default":false,"type":[{"outer":"dart:async.Stream","inner":[{"outer":"dart:io.HttpRequest","inner":[]}]}],"value":null,"annotations":[]},"_router":{"name":"_router","optional":false,"named":false,"default":false,"type":[{"outer":"clean_router-common.Router","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"processHttpRequest":{"name":"processHttpRequest","qualifiedName":"clean_backend/clean_backend.RequestNavigator.processHttpRequest","comment":"<p>HttpRequest.uri.path is matched agains <a>clean_backend/clean_router-common.Router</a>,\nwhole <a>clean_backend/dart:io.HttpRequest</a> is filtered through Filter and if passes all then\n<a>clean_backend/dart:io.HttpRequest</a> is inserted to the correspondig <a>clean_backend/dart:async.Stream</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"req":{"name":"req","optional":false,"named":false,"default":false,"type":[{"outer":"dart:io.HttpRequest","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerDefaultHandler":{"name":"registerDefaultHandler","qualifiedName":"clean_backend/clean_backend.RequestNavigator.registerDefaultHandler","comment":"<p>When <a>clean_backend/clean_router-common.Router</a> matches nothing then <a>clean_backend/clean_backend.RequestNavigator.registerDefaultHandler.handler</a> will be called (through the returned <a>clean_backend/dart:async.Stream</a>).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerHandler":{"name":"registerHandler","qualifiedName":"clean_backend/clean_backend.RequestNavigator.registerHandler","comment":"<p>Registers Handler for a <a>clean_backend/clean_router-common.Route</a> and adds listener to the stream which\nis also returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"routeName":{"name":"routeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"clean_backend/clean_backend.RequestNavigator.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>clean_backend/clean_backend.RequestNavigator.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"clean_backend/clean_backend.RequestNavigator.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"clean_backend/clean_backend.RequestNavigator.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>clean_backend/clean_backend.RequestNavigator.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>clean_backend/clean_backend.RequestNavigator.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"clean_backend/clean_backend.RequestNavigator.noSuchMethod","comment":"<p><a>clean_backend/clean_backend.RequestNavigator.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>clean_backend/clean_backend.RequestNavigator.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>clean_backend/clean_backend.RequestNavigator.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>clean_backend/clean_backend.RequestNavigator.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"clean_backend/clean_backend.RequestNavigator.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}