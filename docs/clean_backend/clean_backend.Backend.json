{"name":"Backend","qualifiedName":"clean_backend/clean_backend.Backend","comment":"<p>A wrapper for <a>clean_backend/dart:io.HttpServer</a>, handles <a>clean_backend/dart:io.HttpRequest</a>s. Provides convenient addition of <a>clean_backend/dart:io.HttpRequest</a>\nhandlers per route. Manages routing requests to proper routes internally.</p>","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":[],"variables":{"COOKIE_HTTP_ONLY":{"name":"COOKIE_HTTP_ONLY","qualifiedName":"clean_backend/clean_backend.Backend.COOKIE_HTTP_ONLY","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dart:core.bool","inner":[]}],"annotations":[]},"COOKIE_PATH":{"name":"COOKIE_PATH","qualifiedName":"clean_backend/clean_backend.Backend.COOKIE_PATH","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dart:core.String","inner":[]}],"annotations":[]},"router":{"name":"router","qualifiedName":"clean_backend/clean_backend.Backend.router","comment":"<p>Register routes which are matched with request.uri .</p>","final":true,"static":false,"constant":false,"type":[{"outer":"clean_router-common.Router","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"config":{"name":"config","qualifiedName":"clean_backend/clean_backend.Backend.Backend-config","comment":"<p>Constructor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_server":{"name":"_server","optional":false,"named":false,"default":false,"type":[{"outer":"dart:io.HttpServer","inner":[]}],"value":null,"annotations":[]},"router":{"name":"router","optional":false,"named":false,"default":false,"type":[{"outer":"clean_router-common.Router","inner":[]}],"value":null,"annotations":[]},"_requestNavigator":{"name":"_requestNavigator","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.RequestNavigator","inner":[]}],"value":null,"annotations":[]},"_hmacFactory":{"name":"_hmacFactory","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"_httpBodyExtractor":{"name":"_httpBodyExtractor","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addDefaultHttpHeader":{"name":"addDefaultHttpHeader","qualifiedName":"clean_backend/clean_backend.Backend.addDefaultHttpHeader","comment":"<p>Adds header which will be attached to each response. Could be overwritten.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addNotFoundView":{"name":"addNotFoundView","qualifiedName":"clean_backend/clean_backend.Backend.addNotFoundView","comment":"<p>If nothing is matched. There is a default <a>clean_backend/clean_backend.Backend._notFoundViewHandler</a>, but it\ncan be overwritten by this method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.RequestHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addRoute":{"name":"addRoute","qualifiedName":"clean_backend/clean_backend.Backend.addRoute","comment":"<p>Adds <a>clean_backend/clean_backend.Backend.addRoute.route</a> for a particular <a>clean_backend/clean_backend.Backend.addRoute.route</a> so handler could be attached to <a>clean_backend/clean_backend.Backend.addRoute.routeName</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"routeName":{"name":"routeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"route":{"name":"route","optional":false,"named":false,"default":false,"type":[{"outer":"clean_router-common.Route","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addStaticView":{"name":"addStaticView","qualifiedName":"clean_backend/clean_backend.Backend.addStaticView","comment":"<p>Corresponding <a>clean_backend/clean_router-common.Route</a> for <a>clean_backend/clean_backend.Backend.addStaticView.routeName</a> should be in the prefix format,\ni.e. \"/uploads/*\", as backend will look for files documentRoot/matchedSufix\n/</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"routeName":{"name":"routeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"documentRoot":{"name":"documentRoot","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addView":{"name":"addView","qualifiedName":"clean_backend/clean_backend.Backend.addView","comment":"<p>Adds <a>clean_backend/clean_backend.Backend.addView.handler</a> for a particular <a>clean_backend/clean_backend.Backend.addView.routeName</a>. Priorly, a <a>clean_backend/clean_router-common.Route</a> with <a>clean_backend/clean_backend.Backend.addView.routeName</a> must be added,\nsee <a>clean_backend/clean_backend.Backend.addRoute</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"routeName":{"name":"routeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.RequestHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"authenticate":{"name":"authenticate","qualifiedName":"clean_backend/clean_backend.Backend.authenticate","comment":"<p>Generates a cookie for a <a>clean_backend/clean_backend.Backend.authenticate.userId</a> and authenticates the user</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.Request","inner":[]}],"value":null,"annotations":[]},"userId":{"name":"userId","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bind":{"name":"bind","qualifiedName":"clean_backend/clean_backend.Backend.bind","comment":"<p>Creates a new backend.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart:async.Future","inner":[{"outer":"clean_backend/clean_backend.Backend","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"hashMethod":{"name":"hashMethod","optional":true,"named":true,"default":true,"type":[{"outer":"crypto.Hash","inner":[]}],"value":"null","annotations":[]},"presentedHost":{"name":"presentedHost","optional":true,"named":true,"default":true,"type":[{"outer":"dart:core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getAuthenticatedUser":{"name":"getAuthenticatedUser","qualifiedName":"clean_backend/clean_backend.Backend.getAuthenticatedUser","comment":"<p>Checks signature and gets authenticated user based on a cookie</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{"cookies":{"name":"cookies","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.List","inner":[{"outer":"dart:io.Cookie","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"logout":{"name":"logout","qualifiedName":"clean_backend/clean_backend.Backend.logout","comment":"<p>Deletes the cookie - sends a cookie with instant expiration</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.Request","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareRequestHandler":{"name":"prepareRequestHandler","qualifiedName":"clean_backend/clean_backend.Backend.prepareRequestHandler","comment":"<p>Transforms <a>clean_backend/clean_backend.Backend.prepareRequestHandler.httpRequest</a> with <a>clean_backend/clean_backend.Backend.prepareRequestHandler.urlParams</a> and creates <a>clean_backend/clean_backend.Request</a> which is\npassed asynchronously to <a>clean_backend/clean_backend.Backend.prepareRequestHandler.handler</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:async.Future","inner":[]}],"parameters":{"httpRequest":{"name":"httpRequest","optional":false,"named":false,"default":false,"type":[{"outer":"dart:io.HttpRequest","inner":[]}],"value":null,"annotations":[]},"urlParams":{"name":"urlParams","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Map","inner":[]}],"value":null,"annotations":[]},"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"clean_backend/clean_backend.RequestHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sign":{"name":"sign","qualifiedName":"clean_backend/clean_backend.Backend.sign","comment":"<p>Signs a <a>clean_backend/clean_backend.Backend.sign.msg</a> using HMAC</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{"msg":{"name":"msg","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"verifySignature":{"name":"verifySignature","qualifiedName":"clean_backend/clean_backend.Backend.verifySignature","comment":"","commentFrom":"clean_backend.Backend.verifySignature","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"msg":{"name":"msg","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"signature":{"name":"signature","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"clean_backend/clean_backend.Backend.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>clean_backend/clean_backend.Backend.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"clean_backend/clean_backend.Backend.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"clean_backend/clean_backend.Backend.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>clean_backend/clean_backend.Backend.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>clean_backend/clean_backend.Backend.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"clean_backend/clean_backend.Backend.noSuchMethod","comment":"<p><a>clean_backend/clean_backend.Backend.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>clean_backend/clean_backend.Backend.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>clean_backend/clean_backend.Backend.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>clean_backend/clean_backend.Backend.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"clean_backend/clean_backend.Backend.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}