{"libraries":[{"packageName":"","name":"dart:core","qualifiedName":"dart:core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","version":"1.8.0"},{"packageName":"clean_backend","name":"clean_backend","qualifiedName":"clean_backend/clean_backend","packageIntro":"<h1>Backend server for convenient request handling</h1>\n<p><a href=\"https://drone.io/github.com/cleandart/clean_backend/latest\"><a href=\"https://drone.io/github.com/cleandart/clean_backend/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/cleandart/clean_backend/status.png\"></img></a></a></p>\n<h2>Motivation</h2>\n<p>Have you ever tried to work with <em>HttpServer</em> ? It's just a stream of <em>HttpRequests</em>, all going to\nthis single location, where you would have to handle them differently based on their URI, manage \ncookies, handle cases when URI is invalid...and all this on your own. This just makes your life\nmuch easier.</p>\n<h2>What is it good for ?</h2>\n<p>Basically, it is a <em>HttpServer</em>, which supports adding <em>Request</em> handlers per path and manages cookies \nconveniently. This <em>Request</em> is a special class, which wraps the imporant parts of the whole request  \ntogether. It's just as simple as adding a new <em>Route</em> path associated with some name and then \nadding a <em>Request</em> handler for this route's name. Route paths support parameters, which are then accessible \nin the <em>Request</em> object in handler. Additionally, all requests - failed or not, are logged with duration of the process. </p>","version":"clean_backend-0.5.6"}],"introduction":"","filetype":"json","sdkVersion":"1.8.0","start-page":"clean_backend"}